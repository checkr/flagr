// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvalResult eval result
// swagger:model evalResult
type EvalResult struct {

	// flag key
	// Required: true
	FlagKey *string `json:"flagKey"`

	// timestamp
	// Required: true
	// Min Length: 1
	Timestamp *string `json:"timestamp"`

	// variant attachment
	// Required: true
	VariantAttachment interface{} `json:"variantAttachment"`

	// variant key
	// Required: true
	// Min Length: 1
	VariantKey *string `json:"variantKey"`
}

// Validate validates this eval result
func (m *EvalResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlagKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvalResult) validateFlagKey(formats strfmt.Registry) error {

	if err := validate.Required("flagKey", "body", m.FlagKey); err != nil {
		return err
	}

	return nil
}

func (m *EvalResult) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.MinLength("timestamp", "body", string(*m.Timestamp), 1); err != nil {
		return err
	}

	return nil
}

func (m *EvalResult) validateVariantAttachment(formats strfmt.Registry) error {

	if err := validate.Required("variantAttachment", "body", m.VariantAttachment); err != nil {
		return err
	}

	return nil
}

func (m *EvalResult) validateVariantKey(formats strfmt.Registry) error {

	if err := validate.Required("variantKey", "body", m.VariantKey); err != nil {
		return err
	}

	if err := validate.MinLength("variantKey", "body", string(*m.VariantKey), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvalResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvalResult) UnmarshalBinary(b []byte) error {
	var res EvalResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
